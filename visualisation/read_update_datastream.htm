<!doctype html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<title>Project RATIH - Update Datastream</title>
	<link rel="stylesheet" href="main.css">
	<link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.1/dist/leaflet.css"
   integrity="sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ=="
   crossorigin="">
	<script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js"
   integrity="sha512-/Nsx9X4HebavoBvEBuyp3I7od5tA0UzAxs+j83KgC8PU0kgB4XiK4Lfe4y4cgBtaRJQEIFCW+oC506aPT2L1zw=="
   crossorigin=""></script>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
</head>
<body>
	<script>
		// Functions to create a new element with certain class(es) or text(s) inside a parent element
		function create_element(parentElement,newElement,newText,newAttribute1,attributeValue1,newAttribute2,attributeValue2){
			if (newElement !== null){
				let element = document.createElement(newElement);
				if (newAttribute1 !== null && attributeValue1 !== null){
					let attribute = document.createAttribute(newAttribute1);
					attribute.value = attributeValue1;
					element.setAttributeNode(attribute);
				}
				if (newAttribute2 !== null && attributeValue2 !== null){
					let attribute = document.createAttribute(newAttribute2);
					attribute.value = attributeValue2;
					element.setAttributeNode(attribute);
				}
				if (newText !== null){
					let text = document.createTextNode(newText);
					element.appendChild(text);
				}
				document.querySelector(parentElement).appendChild(element);
			} else {
				let text = document.createTextNode(newText);
				document.querySelector(parentElement).appendChild(text);
			}
		};
		// Create a container and a heading element for datastream entity(ies)
		create_element("body","div",null,"id","datastream_container",null,null);
		create_element("#datastream_container","h1","Datastream",null,null,null,null);
		// Create a container and a heading element for tasking capability(ies)
		create_element("body","div",null,"id","tasking_capability_container",null,null);
		create_element("#tasking_capability_container","h1","Tasking Capability",null,null,null,null);
		// Read the data in JSON format from the SensorUp server then update the page based on the data
		var thing_id = 2467892;
		console.log("Thing ID: " + thing_id);
		var thing = $.ajax({
			url: "https://scratchpad.sensorup.com/OGCSensorThings/v1.0/Things(" + thing_id + ")?$expand=Locations,Datastreams",
			type: "GET",
			contentType: "application/json; charset=utf-8",
			success: function(data){
				// Read Datastream(s) entity(ies)
				datastream = thing.responseJSON.Datastreams;
				console.log("Number of datastream: " + datastream.length);
				for (let i = 0; i < datastream.length; i++) {
					let datastream_id = datastream[i]["@iot.id"];
					console.log("Datastream ID: " + datastream_id);
					let datastream_name = datastream[i].name
					console.log("Datastream Name: " + datastream_name);
					// Create unique div to contain each datastream or tasking capability
					if (datastream[i].observationType == "Actuator") {
						create_element("#tasking_capability_container","div",null,"id","container_" + datastream_id,null,null);
						// Create h2 element
						create_element("#container_" + datastream_id,"h2",null,"id","h2_" + datastream_id,null,null);
						create_element("#h2_" + datastream_id,"textarea",datastream_name,"placeholder","String",null,null);
					} else {
						create_element("#datastream_container","div",null,"id","container_" + datastream_id,null,null);
						// Create h2 element
						create_element("#container_" + datastream_id,"h2",null,"id","h2_" + datastream_id,null,null);
						create_element("#h2_" + datastream_id,"textarea",datastream_name,"placeholder","String",null,null);
					}
					//Create Datastream ID
					create_element("#container_" + datastream_id,"p",null,"id","datastream_id_" + datastream_id,null,null);
					create_element("#datastream_id_" + datastream_id,"span","ID: ","class","bold",null,null);
					create_element("#datastream_id_" + datastream_id,null,datastream_id,null,null,null,null);
					// Create Datastream Description
					console.log("Datastream Description: " + datastream[i].description);
					create_element("#container_" + datastream_id,"p",null,"id","datastream_description_" + datastream_id,null,null);
					create_element("#datastream_description_" + datastream_id,"span","Description: ","class","bold",null,null);
					create_element("#datastream_description_" + datastream_id,"textarea",datastream[i].description,"placeholder","String",null,null);
					// Create Datastream Observation Type
					console.log("Datastream Observation Type: " + datastream[i].observationType);
					create_element("#container_" + datastream_id,"p",null,"id","datastream_observation_type_" + datastream_id,null,null);
					create_element("#datastream_observation_type_" + datastream_id,"span","Observation Type: ","class","bold",null,null);
					create_element("#datastream_observation_type_" + datastream_id,"textarea",datastream[i].observationType,"placeholder","String",null,null);
					// Create Datastream Unit of Measurement Name
					console.log("Datastream Unit of Measurement Name: " + datastream[i].unitOfMeasurement.name);
					create_element("#container_" + datastream_id,"p",null,"id","datastream_unit_of_measurement_name_" + datastream_id,null,null);
					create_element("#datastream_unit_of_measurement_name_" + datastream_id,"span","Unit of Measurement: ","class","bold",null,null);
					create_element("#datastream_unit_of_measurement_name_" + datastream_id,"textarea",datastream[i].unitOfMeasurement.name,"placeholder","String",null,null);
					// Create Datastream Unit of Measurement Symbol
					console.log("Datastream Unit of Measurement Symbol: " + datastream[i].unitOfMeasurement.symbol);
					create_element("#container_" + datastream_id,"p",null,"id","datastream_unit_of_measurement_symbol_" + datastream_id,null,null);
					create_element("#datastream_unit_of_measurement_symbol_" + datastream_id,"span","Symbol: ","class","bold",null,null);
					create_element("#datastream_unit_of_measurement_symbol_" + datastream_id,"textarea",datastream[i].unitOfMeasurement.symbol,"placeholder","String",null,null);
					// Create Datastream Unit of Measurement Definition
					console.log("Datastream Unit of Measurement Definition: " + datastream[i].unitOfMeasurement.definition);
					create_element("#container_" + datastream_id,"p",null,"id","datastream_unit_of_measurement_definition_" + datastream_id,null,null);
					create_element("#datastream_unit_of_measurement_definition_" + datastream_id,"span","Definition: ","class","bold",null,null);
					create_element("#datastream_unit_of_measurement_definition_" + datastream_id,"textarea",datastream[i].unitOfMeasurement.definition,"placeholder","String",null,null);
					// Create Observed Property heading
					create_element("#container_" + datastream_id,"h3","Observed Property",null,null,null,null);
					// Create unordered list elements under Observed Property
					create_element("#container_" + datastream_id,"ul",null,"class","observed_property",null,null);
					// Create Sensor heading
					if (datastream[i].observationType == "Actuator") {
						create_element("#container_" + datastream_id,"h3","Actuator",null,null,null,null);
					} else {
						create_element("#container_" + datastream_id,"h3","Sensor",null,null,null,null);
					}
					// Create unordered list elements under Sensor
					create_element("#container_" + datastream_id,"ul",null,"class","sensor",null,null);
					print_datastream_detail(datastream_id);
				}
				create_element("body","a",null,"id","update_datastream",null,null);
				create_element("#update_datastream","button","Update Datastream(s)","onclick","update_datastream();",null,null);
				create_element("body","span"," ",null,null,null,null);
				create_element("body","a",null,"href","index.htm","id","back_to_main_page");
				create_element("#back_to_main_page","button","Back to main page",null,null,null,null);
				// Add line break to escape linkn in the bottom of the page
				create("body","br",null,null,null,null,null);
				create("body","br",null,null,null,null,null);
			},
			error: function(response, status){
				console.log(response);
				console.log(status);
			}
		});
		function print_datastream_detail(datastream_id){
			var datastream_detail = $.ajax({
				url: "https://scratchpad.sensorup.com/OGCSensorThings/v1.0/Datastreams(" + datastream_id + ")?$expand=ObservedProperty,Sensor",
				type: "GET",
				contentType: "application/json; charset=utf-8",
				success: function(data){
					function create_list(listTitle,listSource,listMode,listDisplay,idList){
						console.log(listTitle + listSource);
						create_element("#container_" + datastream_id + " ul." + listMode,"li",null,"id",idList + datastream_id,null,null);
						create_element("#container_" + datastream_id + " ul." + listMode + " li:last-child","span",listDisplay,"class","bold",null,null);
						create_element("#container_" + datastream_id + " ul." + listMode + " li:last-child","textarea",listSource,"placeholder","String",null,null);
					};
					// Observed Property Name
					create_list("Observed Property Name: ",datastream_detail.responseJSON.ObservedProperty.name,"observed_property","Name: ","name_");
					// Observed Property Description
					create_list("Observed Property Description: ",datastream_detail.responseJSON.ObservedProperty.description,"observed_property","Description: ","description_");
					// Observed Property Definition
					create_list("Observed Property Definition: ",datastream_detail.responseJSON.ObservedProperty.definition,"observed_property","Definition: ","definition_");
					// Sensor Name
					create_list("Sensor Name: ",datastream_detail.responseJSON.Sensor.name,"sensor","Name: ","name_");
					// Sensor Description
					create_list("Sensor Description: ",datastream_detail.responseJSON.Sensor.description,"sensor","Description: ","description_");
					// Sensor Encoding Type
					create_list("Sensor Encoding Type: ",datastream_detail.responseJSON.Sensor.encodingType,"sensor","Encoding Type: ","encoding_type_");
					// Sensor Metadata
					create_list("Sensor Metadata: ",datastream_detail.responseJSON.Sensor.metadata,"sensor","Metadata: ","metadata_");
				},
				error: function(response, status){
					console.log(response);
					console.log(status);
				}
			});
		};
		function update_datastream(){
			let thing = $.ajax({
				url: "https://scratchpad.sensorup.com/OGCSensorThings/v1.0/Things(" + thing_id + ")?$expand=Locations,Datastreams",
				type: "GET",
				contentType: "application/json; charset=utf-8",
				success: function(data){
					// Read Datastream(s) entity(ies)
					datastream = thing.responseJSON.Datastreams;
					console.log("Number of datastream: " + datastream.length);
					for (let i = 0; i < datastream.length; i++) {
						let datastream_id = datastream[i]["@iot.id"];
						console.log("Datastream ID: " + datastream_id);
						let datastream_name = document.querySelector("#h2_" + datastream_id + " textarea").value;
						console.log("New Datastream Name: " + datastream_name);
						let datastream_description = document.querySelector("p#datastream_description_" + datastream_id + " textarea").value;
						console.log("New Datastream Description: " + datastream_description);
						let datastream_observation_type = document.querySelector("p#datastream_observation_type_" + datastream_id + " textarea").value;
						console.log("New Datastream Observation Type: " + datastream_observation_type);
						let datastream_unit_of_measurement_name = document.querySelector("p#datastream_unit_of_measurement_name_" + datastream_id + " textarea").value;
						console.log("New Unit of Measurement Name: " + datastream_unit_of_measurement_name);
						let datastream_unit_of_measurement_symbol = document.querySelector("p#datastream_unit_of_measurement_symbol_" + datastream_id + " textarea").value;
						console.log("New Unit of Measurement Symbol: " + datastream_unit_of_measurement_symbol);
						let datastream_unit_of_measurement_definition = document.querySelector("p#datastream_unit_of_measurement_definition_" + datastream_id + " textarea").value;
						console.log("New Unit of Measurement Definition: " + datastream_unit_of_measurement_definition);
						let new_datastream = JSON.stringify({
							"name": datastream_name,
							"description": datastream_description,
							"observationType": datastream_observation_type,
							"unitOfMeasurement": {
								"name": datastream_unit_of_measurement_name,
								"symbol": datastream_unit_of_measurement_symbol,
								"definition": datastream_unit_of_measurement_definition
							}
						});
						console.log("New datastream: " + new_datastream);
						$.ajax({
							url: "https://scratchpad.sensorup.com/OGCSensorThings/v1.0/Datastreams(" + datastream_id + ")",
							type: "PATCH",
							data: new_datastream,
							contentType: "application/json; charset=utf-8",
							success: function(data){
								update_observed_property(datastream_id);
								update_sensor(datastream_id);
							},
							error: function(response, status){
								console.log(response);
								console.log(status);
							}
						});
					}
					create_element("body","p","Datastream has been updated.",null,null,null,null);
				},
				error: function(response, status){
					console.log(response);
					console.log(status);
				}
			});
		};
		function update_observed_property(datastream_id){
			var observed_property_detail = $.ajax({
				url: "https://scratchpad.sensorup.com/OGCSensorThings/v1.0/Datastreams(" + datastream_id + ")?$expand=ObservedProperty,Sensor",
				type: "GET",
				contentType: "application/json; charset=utf-8",
				success: function(data){
					let observed_property_id = observed_property_detail.responseJSON.ObservedProperty["@iot.id"];
					console.log("Observed Property ID: " + observed_property_id);
					let observed_property_name = document.querySelector("ul.observed_property li#name_" + datastream_id + " textarea").value;
					console.log("New Observed Property Name: " + observed_property_name);
					let observed_property_description = document.querySelector("ul.observed_property li#description_" + datastream_id + " textarea").value;
					console.log("New Observed Property Description: " + observed_property_description);
					let observed_property_definition = document.querySelector("ul.observed_property li#definition_" + datastream_id + " textarea").value;
					console.log("New Observed Property Definition: " + observed_property_definition);
					let new_observed_property = JSON.stringify({
						"name": observed_property_name,
						"description": observed_property_description,
						"definition": observed_property_definition
					});
					console.log("New Observed Property: " + new_observed_property);
					$.ajax({
						url: "https://scratchpad.sensorup.com/OGCSensorThings/v1.0/ObservedProperties(" + observed_property_id + ")",
						type: "PATCH",
						data: new_observed_property,
						contentType: "application/json; charset=utf-8",
						success: function(data){
							console.log("Observed property with id " + observed_property_id + " has been updated.");
						},
						error: function(response, status){
							console.log(response);
							console.log(status);
						}
					});
				},
				error: function(response, status){
					console.log(response);
					console.log(status);
				}
			});
		};
		function update_sensor(datastream_id){
			var sensor_detail = $.ajax({
				url: "https://scratchpad.sensorup.com/OGCSensorThings/v1.0/Datastreams(" + datastream_id + ")?$expand=ObservedProperty,Sensor",
				type: "GET",
				contentType: "application/json; charset=utf-8",
				success: function(data){
					let sensor_id = sensor_detail.responseJSON.Sensor["@iot.id"];
					console.log("Sensor ID: " + sensor_id);
					let sensor_name = document.querySelector("ul.sensor li#name_" + datastream_id + " textarea").value;
					console.log("New Sensor Name: " + sensor_name);
					let sensor_description = document.querySelector("ul.sensor li#description_" + datastream_id + " textarea").value;
					console.log("New Sensor Description: " + sensor_description);
					let sensor_encoding_type = document.querySelector("ul.sensor li#encoding_type_" + datastream_id + " textarea").value;
					console.log("New Sensor Encoding Type: " + sensor_encoding_type);
					let sensor_metadata = document.querySelector("ul.sensor li#metadata_" + datastream_id + " textarea").value;
					console.log("New Sensor Metadata: " + sensor_metadata);
					let new_sensor = JSON.stringify({
						"name": sensor_name,
						"description": sensor_description,
						"encodingType": sensor_encoding_type,
						"metadata": sensor_metadata
					});
					console.log("New Sensor: " + new_sensor);
					$.ajax({
						url: "https://scratchpad.sensorup.com/OGCSensorThings/v1.0/Sensors(" + sensor_id + ")",
						type: "PATCH",
						data: new_sensor,
						contentType: "application/json; charset=utf-8",
						success: function(data){
							console.log("Sensor with id " + sensor_id + " has been updated.");
						},
						error: function(response, status){
							console.log(response);
							console.log(status);
						}
					});
				},
				error: function(response, status){
					console.log(response);
					console.log(status);
				}
			});
		};
	</script>
</body>
</html>
