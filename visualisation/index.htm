<!doctype html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<title>Project RATIH Main Page</title>
	<link rel="stylesheet" href="main.css">
	<link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.1/dist/leaflet.css"
   integrity="sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ=="
   crossorigin="">
	<script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js"
   integrity="sha512-/Nsx9X4HebavoBvEBuyp3I7od5tA0UzAxs+j83KgC8PU0kgB4XiK4Lfe4y4cgBtaRJQEIFCW+oC506aPT2L1zw=="
   crossorigin=""></script>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
</head>
<body>
<p>Click <a href="https://scratchpad.sensorup.com/OGCSensorThings/v1.0/Things(1684190)?$expand=Locations,Datastreams" target="_blank"><button>here</button></a> to show data in JSON format</p>
<h1>Thing</h1>
	<p><span class="bold">ID in the server: </span>1684190</p>
	<p><span class="bold">Name: </span><span id="thing_name"></span></p>
	<p><span class="bold">Description: </span><span id="thing_description"></span></p>
	<p><span class="bold">Properties: </span><span id="thing_property"></span></p>
	<a href="read_update_thing.htm"><button>Update Thing</button></a>
	<h1>Location</h1>
	<p><span class="bold">Name: </span><span id="location_name"></span></p>
	<p><span class="bold">Description: </span><span id="location_description"></span></p>
	<p><span class="bold">Encoding: </span><span id="location_encoding"></span></p>
	<p><span class="bold">Type: </span><span id="location_type"></span></p>
	<p><span class="bold">Coordinates: </span></p>
	<ul>
		<li><span class="bold">Longitude: </span><span id="location_longitude"></span></li>
		<li><span class="bold">Latitude: </span><span id="location_latitude"></li>
	</ul>
	<a href="read_update_location.htm"><button>Update Location</button></a>
	<div id="mapid"></div>
	<script>
		// Functions to create a new element with certain class(es) or text(s) inside a parent element
		function create_element(parentElement,newElement,newText,newAttribute1,attributeValue1,newAttribute2,attributeValue2){
			if (newElement !== null){
				let element = document.createElement(newElement);
				if (newAttribute1 !== null && attributeValue1 !== null){
					let attribute = document.createAttribute(newAttribute1);
					attribute.value = attributeValue1;
					element.setAttributeNode(attribute);
				}
				if (newAttribute2 !== null && attributeValue2 !== null){
					let attribute = document.createAttribute(newAttribute2);
					attribute.value = attributeValue2;
					element.setAttributeNode(attribute);
				}
				if (newText !== null){
					let text = document.createTextNode(newText);
					element.appendChild(text);
				}
				document.querySelector(parentElement).appendChild(element);
			} else {
				let text = document.createTextNode(newText);
				document.querySelector(parentElement).appendChild(text);
			}
		};
		// Read the data in JSON format from the SensorUp server then update the page based on the data
		var thing_id = 1684190;
		console.log("Thing ID: " + thing_id);
		var thing = $.ajax({
			url: "https://scratchpad.sensorup.com/OGCSensorThings/v1.0/Things(" + thing_id + ")?$expand=Locations,Datastreams",
			type: "GET",
			contentType: "application/json; charset=utf-8",
			success: function(data){
				// Read Thing entity
				console.log("Thing Name: " + thing.responseJSON.name);
				document.querySelector("#thing_name").textContent = thing.responseJSON.name;
				console.log("Thing Description: " + thing.responseJSON.description);
				document.querySelector("#thing_description").textContent = thing.responseJSON.description;
				console.log("Thing Properties: " + JSON.stringify(thing.responseJSON.properties));
				document.querySelector("#thing_property").textContent = JSON.stringify(thing.responseJSON.properties);
				// Read Location entity
				var location = JSON.stringify(thing.responseJSON.Locations);
				location = location.slice(1,location.length-1);
				console.log("Location: " + location);
				location = JSON.parse(location);
				console.log("Location Name: " + location.name);
				document.querySelector("#location_name").textContent = location.name;
				console.log("Location Description: " + location.description);
				document.querySelector("#location_description").textContent = location.description;
				console.log("Location Encoding: " + location.encodingType);
				document.querySelector("#location_encoding").textContent = location.encodingType;
				console.log("Location Type: " + location.location.type);
				document.querySelector("#location_type").textContent = location.location.type;
				var location_longitude = location.location.coordinates[0];
				console.log("Location Longitude: " + location_longitude);
				document.querySelector("#location_longitude").textContent = location_longitude;
				var location_latitude = location.location.coordinates[1];
				console.log("Location Latitude: " + location_latitude);
				document.querySelector("#location_latitude").textContent = location_latitude;
				// Create map visualisation
				var mymap = L.map('mapid').setView([location_latitude, location_longitude], 17);
				L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {
					attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="http://mapbox.com">Mapbox</a>',
					maxZoom: 18,
					id: 'mapbox.streets'
				}).addTo(mymap);
				var marker = L.marker([location_latitude, location_longitude]).addTo(mymap);
				marker.bindPopup("Thing's location.").openPopup();
				// Create a container and a heading element for datastream entity(ies)
				create_element("body","div",null,"id","datastream_container",null,null);
				create_element("#datastream_container","h1","Datastream",null,null,null,null);
				// Create a container and a heading element for tasking capability(ies)
				create_element("body","div",null,"id","tasking_capability_container",null,null);
				create_element("#tasking_capability_container","h1","Tasking Capability",null,null,null,null);
				// Read Datastream(s) entity(ies)
				datastream = thing.responseJSON.Datastreams;
				console.log("Number of datastream: " + datastream.length);
				for (let i = 0; i < datastream.length; i++) {
					let datastream_id = datastream[i]["@iot.id"];
					console.log("Datastream ID: " + datastream_id);
					let datastream_name = datastream[i].name
					console.log("Datastream Name: " + datastream_name);
					// Create unique div to contain each datastream or tasking capability
					if (datastream[i].observationType == "Actuator") {
						create_element("#tasking_capability_container","div",null,"id","container_" + datastream_id,null,null);
						// Create h2 element
						create_element("#container_" + datastream_id,"h2",datastream_name,"id","h2_" + datastream_id,null,null);
					} else {
						create_element("#datastream_container","div",null,"id","container_" + datastream_id,null,null);
						// Create h2 element
						create_element("#container_" + datastream_id,"h2",datastream_name,"id","h2_" + datastream_id,null,null);
						create_element("#h2_" + datastream_id,"span"," show ",null,null,null,null);
						create_element("#h2_" + datastream_id + " span","a","chart","href","datastream_" + datastream_id + "_chart.htm","target","_blank");
						create_element("#h2_" + datastream_id + " span",null," | ",null,null,null,null);
						create_element("#h2_" + datastream_id + " span","a","gauge","href","datastream_" + datastream_id + "_gauge.htm","target","_blank");
					}
					//Create Datastream ID
					create_element("#container_" + datastream_id,"p",null,"id","datastream_id_" + datastream_id,null,null);
					create_element("#datastream_id_" + datastream_id,"span","ID: ","class","bold",null,null);
					create_element("#datastream_id_" + datastream_id,null,datastream_id,null,null,null,null);
					// Create Datastream Description
					console.log("Datastream Description: " + datastream[i].description);
					create_element("#container_" + datastream_id,"p",null,"id","datastream_description_" + datastream_id,null,null);
					create_element("#datastream_description_" + datastream_id,"span","Description: ","class","bold",null,null);
					create_element("#datastream_description_" + datastream_id,null,datastream[i].description,null,null,null,null);
					// Create Datastream Observation Type
					console.log("Datastream Observation Type: " + datastream[i].observationType);
					create_element("#container_" + datastream_id,"p",null,"id","datastream_observation_type_" + datastream_id,null,null);
					create_element("#datastream_observation_type_" + datastream_id,"span","Observation Type: ","class","bold",null,null);
					create_element("#datastream_observation_type_" + datastream_id,null,datastream[i].observationType,null,null,null,null);
					// Create Datastream Unit of Measurement Name
					console.log("Datastream Unit of Measurement Name: " + datastream[i].unitOfMeasurement.name);
					create_element("#container_" + datastream_id,"p",null,"id","datastream_unit_of_measurement_name_" + datastream_id,null,null);
					create_element("#datastream_unit_of_measurement_name_" + datastream_id,"span","Unit of Measurement: ","class","bold",null,null);
					create_element("#datastream_unit_of_measurement_name_" + datastream_id,null,datastream[i].unitOfMeasurement.name,null,null,null,null);
					// Create Datastream Unit of Measurement Symbol
					console.log("Datastream Unit of Measurement Symbol: " + datastream[i].unitOfMeasurement.symbol);
					create_element("#container_" + datastream_id,"p",null,"id","datastream_unit_of_measurement_symbol_" + datastream_id,null,null);
					create_element("#datastream_unit_of_measurement_symbol_" + datastream_id,"span","Symbol: ","class","bold",null,null);
					create_element("#datastream_unit_of_measurement_symbol_" + datastream_id,null,datastream[i].unitOfMeasurement.symbol,null,null,null,null);
					// Create Datastream Unit of Measurement Definition
					console.log("Datastream Unit of Measurement Definition: " + datastream[i].unitOfMeasurement.definition);
					create_element("#container_" + datastream_id,"p",null,"id","datastream_unit_of_measurement_definition_" + datastream_id,null,null);
					create_element("#datastream_unit_of_measurement_definition_" + datastream_id,"span","Definition: ","class","bold",null,null);
					create_element("#datastream_unit_of_measurement_definition_" + datastream_id,null,datastream[i].unitOfMeasurement.definition,null,null,null,null);
					// Create Observed Property heading
					create_element("#container_" + datastream_id,"h3","Observed Property",null,null,null,null);
					// Create unordered list elements under Observed Property
					create_element("#container_" + datastream_id,"ul",null,"class","observed_property",null,null);
					// Create Sensor heading
					if (datastream[i].observationType == "Actuator") {
						create_element("#container_" + datastream_id,"h3","Actuator",null,null,null,null);
					} else {
						create_element("#container_" + datastream_id,"h3","Sensor",null,null,null,null);
					}
					// Create unordered list elements under Sensor
					create_element("#container_" + datastream_id,"ul",null,"class","sensor",null,null);
					print_datastream_detail(datastream_id);
				}
				create_element("body","a",null,"href","read_update_datastream.htm","id","update_datastream");
				create_element("#update_datastream","button","Update Datastream",null,null,null,null);
				// Add some lines to escape link in the bottom of the page
				create_element("body","br",null,null,null,null,null);
				create_element("body","br",null,null,null,null,null);
			},
			error: function(response, status){
				console.log(response);
				console.log(status);
			}
		});
		function print_datastream_detail(datastream_id){
			var datastream_detail = $.ajax({
				url: "https://scratchpad.sensorup.com/OGCSensorThings/v1.0/Datastreams(" + datastream_id + ")?$expand=ObservedProperty,Sensor",
				type: "GET",
				contentType: "application/json; charset=utf-8",
				success: function(data){
					function create_list(listTitle,listSource,listMode,listDisplay){
						console.log(listTitle + listSource);
						create_element("#container_" + datastream_id + " ul." + listMode,"li",null,null,null,null,null);
						create_element("#container_" + datastream_id + " ul." + listMode + " li:last-child","span",listDisplay,"class","bold",null,null);
						create_element("#container_" + datastream_id + " ul." + listMode + " li:last-child",null,listSource,null,null,null,null);
					};
					// Observed Property Name
					create_list("Observed Property Name: ",datastream_detail.responseJSON.ObservedProperty.name,"observed_property","Name: ");
					// Observed Property Description
					create_list("Observed Property Description: ",datastream_detail.responseJSON.ObservedProperty.description,"observed_property","Description: ");
					// Observed Property Definition
					create_list("Observed Property Definition: ",datastream_detail.responseJSON.ObservedProperty.definition,"observed_property","Definition: ");
					// Sensor Name
					create_list("Sensor Name: ",datastream_detail.responseJSON.Sensor.name,"sensor","Name: ");
					// Sensor Description
					create_list("Sensor Description: ",datastream_detail.responseJSON.Sensor.description,"sensor","Description: ");
					// Sensor Encoding Type
					create_list("Sensor Encoding Type: ",datastream_detail.responseJSON.Sensor.encodingType,"sensor","Encoding Type: ");
					// Sensor Metadata
					create_list("Sensor Metadata: ",datastream_detail.responseJSON.Sensor.metadata,"sensor","Metadata: ");
				},
				error: function(response, status){
					console.log(response);
					console.log(status);
				}
			});
		}
	</script>
</body>
</html>
